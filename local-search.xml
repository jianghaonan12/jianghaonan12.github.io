<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>将hexo部署到github</title>
    <link href="/2023/07/02/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <url>/2023/07/02/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<p><strong>Hexo Theme Fluid的官方网址：</strong><a href="">https://hexo.fluid-dev.com/</a></p><p>打开自己博客文件夹的根目录下的配置文件 _config.yml，翻到最后，进行如下修改即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: https:&#x2F;&#x2F;github自己的token@github.com&#x2F;github的username&#x2F;github的username.github.io  branch: gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>&lt;github的username&gt;.github.io是你的github仓库。例如：zhangsan.github.io（github.io也是仓库名的一部分）</strong></p><p><strong>新的 token 设置网址：<a href="https://github.com/settings/tokens">Personal Access Tokens (Classic) (github.com)</a></strong></p><p>修改完配置文件 _config.yml 并保存后，回到 gitbash</p><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后进行部署</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>浏览 <code>&lt;github的username&gt;.github.io</code> 检查你的网站能否运作。例如：zhangsan.github.io</p><p>地址栏输入之后就能看到自己的博客了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker安装nginx</title>
    <link href="/2023/07/02/docker%E5%AE%89%E8%A3%85nginx/"/>
    <url>/2023/07/02/docker%E5%AE%89%E8%A3%85nginx/</url>
    
    <content type="html"><![CDATA[<h3 id="1-拉取-nginx-镜像"><a href="#1-拉取-nginx-镜像" class="headerlink" title="1. 拉取 nginx 镜像"></a>1. 拉取 nginx 镜像</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 拉取 nginx 镜像docker pull nginx           # 不加版本号默认下载 latest 版本，即 docker pull nginx:latest# 查看镜像docker images</code></pre></div></figure><h3 id="2-运行镜像（使用-nginx-latest-镜像创建容器）"><a href="#2-运行镜像（使用-nginx-latest-镜像创建容器）" class="headerlink" title="2. 运行镜像（使用 nginx:latest 镜像创建容器）"></a>2. 运行镜像（使用 nginx:latest 镜像创建容器）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;docker&#x2F;nginx&#x2F;conf # nginx 存放配置文件的目录 mkdir -p &#x2F;docker&#x2F;nginx&#x2F;logs # nginx 存放日志的目录 mkdir -p &#x2F;docker&#x2F;nginx&#x2F;html # nginx 启动网站目录（存放静态文件的目录）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>然后将 nginx 镜像中的部分文件拷贝到宿主机的挂载目录中</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 1. 先使用 nginx 镜像创建 nginx 容器，将文件拷贝出来先 docker run --name nginx -d -p 80:80 nginx # 2. 将容器中的 nginx.conf 文件拷贝到宿主机中 docker cp nginx:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf &#x2F;docker&#x2F;nginx&#x2F;conf&#x2F;nginx.conf # 3. 将容器中 conf.d 文件夹（包括里面的文件）拷贝到宿主机中 docker cp nginx:&#x2F;etc&#x2F;nginx&#x2F;conf.d &#x2F;docker&#x2F;nginx&#x2F;conf&#x2F;conf.d # 4. 将容器中的 html 文件夹拷贝到宿主机中 docker cp nginx:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html &#x2F;docker&#x2F;nginx&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>停止刚刚运行的 nginx 容器</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 停止 nginx 容器 docker stop nginx # 删除 nginx 容器 docker rm nginx <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>重新使用 nginx 镜像创建 nginx 容器，并挂载容器数据卷到宿主机目录中<br>    # 要执行的命令</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker run -p 80:80 --name nginx \-v &#x2F;docker&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \-v &#x2F;docker&#x2F;nginx&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d \-v &#x2F;docker&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx \-v &#x2F;docker&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \-d \--restart&#x3D;always \nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>命令说明：</p><ul><li><code>-p 80:80</code> 指定端口映射，格式为：主机(宿主)端口:容器端口</li><li><code>--name nginx</code> 命名启动的容器名字为 nginx</li><li><code>-v</code> 载文件或目录：前面是宿主机部分，后面是容器部分</li><li><code>-d</code> 表示后台启动容器</li><li><code>--restart=always</code> 重启模式，每次启动 docker 都会自动重启 nginx 容器。</li><li><code>nginx:latest</code> 表示使用该镜像创建容器</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
